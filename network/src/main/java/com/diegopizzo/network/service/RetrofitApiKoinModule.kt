package com.diegopizzo.network.service

import ir.logicbase.mockfit.MockFitConfig.REQUEST_TO_JSON
import ir.logicbase.mockfit.MockFitInterceptor
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import org.koin.dsl.module
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.io.InputStream
import java.util.concurrent.TimeUnit

fun retrofitModule(
    baseUrl: String,
    apiKeyValue: String,
    bodyFactory: (input: String) -> InputStream,
    getLogger: (tag: String, message: String) -> Unit,
    isMockEnabled: Boolean = false,
) = module {
    single<RetrofitApi> {

        val loggingInterceptor = HttpLoggingInterceptor().apply {
            this.level = HttpLoggingInterceptor.Level.BODY
        }

        fun provideMockFitInterceptor(
            baseUrl: String,
            bodyFactory: (input: String) -> InputStream,
            getLogger: (tag: String, message: String) -> Unit,
            isMockEnabled: Boolean,
        ) = MockFitInterceptor(
            bodyFactory = { input -> bodyFactory(input) }, // read asset file
            logger = { tag, message ->
                getLogger(tag, message)
            }, // pass logger to log events in logcat
            baseUrl = baseUrl, // base url of your api
            requestPathToMockPathRule = REQUEST_TO_JSON, // autogenerated constant, just press build button
            mockFilesPath = MOCK_FILES_PATH, // path to json files
            mockFitEnable = isMockEnabled,
            apiResponseLatency = 500L // latency of retrieving data
        )

        fun provideOkHttpClient(mockFitInterceptor: MockFitInterceptor) = OkHttpClient.Builder()
            .addInterceptor {
                val request = it.request().newBuilder()
                    .addHeader(HEADER_KEY_PARAMETER_NAME, apiKeyValue)
                    .build()
                it.proceed(request)
            }
            .addInterceptor(loggingInterceptor)
            .addInterceptor(mockFitInterceptor)
            .connectTimeout(CONNECT_TIMEOUT, TimeUnit.SECONDS)
            .writeTimeout(WRITE_TIMEOUT, TimeUnit.SECONDS)
            .readTimeout(READ_TIMEOUT, TimeUnit.SECONDS)
            .build()

        val httpClient = provideOkHttpClient(
            provideMockFitInterceptor(
                baseUrl = baseUrl,
                bodyFactory = bodyFactory,
                getLogger = { tag: String, message: String -> getLogger(tag, message) },
                isMockEnabled = isMockEnabled,
            )
        )

        Retrofit.Builder()
            .baseUrl(baseUrl)
            .addConverterFactory(GsonConverterFactory.create())
            .client(httpClient)
            .build()
            .create(RetrofitApi::class.java)
    }
}

private const val MOCK_FILES_PATH = "mock_json"
private const val HEADER_KEY_PARAMETER_NAME = "x-rapidapi-key"
private const val CONNECT_TIMEOUT = 20L
private const val WRITE_TIMEOUT = 20L
private const val READ_TIMEOUT = 30L